import type { PageServerLoad } from './$types';
import { PUBLIC_HOST } from '$env/static/public';
import { error } from '@sveltejs/kit';
import { sites_table, posts } from '$lib/schemas/db/schema';
import { eq, and } from 'drizzle-orm';
// import { BYPASS_TOKEN } from '$env/static/private';

// export const config = {
// 	isr: {
// 		// Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
// 		// Setting the value to `false` means it will never expire.
// 		expiration: 60 * 5,

// 		// Random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset
// 		// with a __prerender_bypass=<token> cookie.
// 		//
// 		// Making a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will force the asset to be re-validated.
// 		bypassToken: BYPASS_TOKEN

// 		// List of valid query parameters. Other parameters (such as utm tracking codes) will be ignored,
// 		// ensuring that they do not result in content being regenerated unnecessarily
// 		// allowQuery: ['search']
// 	}
// };

export const load: PageServerLoad = async (event) => {
	const subdomain = event.url.host.replace(`.${PUBLIC_HOST}`, '');

	const result = await event.locals.db.query.sites_table.findFirst({
		where: eq(sites_table.subdomain, subdomain),
		columns: {
			name: true,
			description: true,
			cover_image_url: true,
			subdomain: true,
			custom_domain: true
		},
		with: {
			posts: {
				limit: 1,
				columns: {
					title: true,
					description: true,
					slug: true,
					created_at: true,
					content_html: true
				},
				where: and(eq(posts.published, true), eq(posts.slug, event.params.slug))
			}
		}
	});

	if (!result || !result.posts.length) error(404, 'Not found');

	const { posts: postsData, ...site } = result;
	const post = postsData[0];
	return { site, post };
};
